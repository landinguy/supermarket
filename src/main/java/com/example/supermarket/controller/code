package com.example.supermarket.controller.model;

import lombok.Data;

@Data
public class BillReq {
    private Integer outid;
    private String pay_amount;
    private Integer pay_count;
    private String refund_amount;
    private Integer refund_count;
}


package com.example.supermarket.controller.model;

import lombok.Data;

@Data
public class GoodsReq {
    private Integer pageNo;
    private Integer pageSize;
    private Integer type;
}


package com.example.supermarket.controller.model;

import lombok.Data;

@Data
public class OrderReq {
    private Integer pageNo;
    private Integer pageSize;
    private Integer userId;
}


package com.example.supermarket.controller;

import com.example.supermarket.controller.model.BillReq;
import com.example.supermarket.service.BillService;
import com.example.supermarket.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;

@Slf4j
@RestController
@RequestMapping("bill")
public class BillController {
    @Resource
    private BillService billService;

    @GetMapping("get")
    public Result get(String date) {
        log.info("查询服务商日账单,date#{}", date);
        Result.ResultBuilder builder = Result.builder();
        try {
            return billService.get(date);
        } catch (Exception e) {
            builder.code(-1).msg("查询服务商日账单失败");
            log.error("查询服务商日账单失败", e);
        }
        return builder.build();
    }

    @PostMapping("add")
    public Result add(@RequestBody BillReq req) {
        log.info("商户对账,params#{}", req);
        Result.ResultBuilder builder = Result.builder();
        try {
            return billService.add(req);
        } catch (Exception e) {
            builder.code(-1).msg("商户对账失败");
            log.error("商户对账失败", e);
        }
        return builder.build();
    }

}

package com.example.supermarket.controller;

import com.example.supermarket.service.CommonService;
import com.example.supermarket.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;

@Slf4j
@RestController
public class CommonController {
    @Resource
    private CommonService commonService;

    @PostMapping("upload")
    public Result upload(MultipartFile file) {
        log.info("上传文件,filename#{}", file.getOriginalFilename());
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(commonService.upload(file));
        } catch (Exception e) {
            log.error("上传文件失败", e);
            builder.code(-1).msg("文件上传失败").build();
        }
        return builder.build();
    }

}


package com.example.supermarket.controller;

import com.example.supermarket.controller.model.GoodsReq;
import com.example.supermarket.entity.Goods;
import com.example.supermarket.service.GoodsService;
import com.example.supermarket.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;

@Slf4j
@RestController
@RequestMapping("goods")
public class GoodsController {
    @Resource
    private GoodsService goodsService;

    @GetMapping("type/{name}")
    public Result addType(@PathVariable String name) {
        log.info("添加商品分类,name#{}", name);
        Result.ResultBuilder builder = Result.builder();
        try {
            goodsService.addType(name);
        } catch (Exception e) {
            builder.code(-1).msg("添加商品分类失败");
            log.error("添加商品分类失败", e);
        }
        return builder.build();
    }

    @GetMapping("types")
    public Result getType() {
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(goodsService.getType());
        } catch (Exception e) {
            builder.code(-1).msg("查询商品分类失败");
            log.error("查询商品分类失败", e);
        }
        return builder.build();
    }

    @PostMapping("add")
    public Result addGoods(@RequestBody Goods goods) {
        log.info("添加商品,params#{}", goods);
        Result.ResultBuilder builder = Result.builder();
        try {
            goodsService.addGoods(goods);
        } catch (Exception e) {
            builder.code(-1).msg("添加商品失败");
            log.error("添加商品失败", e);
        }
        return builder.build();
    }

    @PostMapping("get")
    public Result getGoods(@RequestBody GoodsReq req) {
        log.info("查询商品,params#{}", req);
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(goodsService.getGoods(req));
        } catch (Exception e) {
            builder.code(-1).msg("查询商品失败");
            log.error("查询商品失败", e);
        }
        return builder.build();
    }


}



package com.example.supermarket.controller;

import com.example.supermarket.controller.model.OrderReq;
import com.example.supermarket.entity.OrderRecord;
import com.example.supermarket.service.OrderService;
import com.example.supermarket.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;

@Slf4j
@RestController
@RequestMapping("order")
public class OrderController {
    @Resource
    private OrderService orderService;

    @PostMapping("add")
    public Result add(@RequestBody OrderRecord record) {
        log.info("生成订单,params#{}", record);
        Result.ResultBuilder builder = Result.builder();
        try {
            orderService.add(record);
        } catch (Exception e) {
            builder.code(-1).msg("生成订单失败");
            log.error("生成订单失败", e);
        }
        return builder.build();
    }

    @PostMapping("get")
    public Result get(@RequestBody OrderReq req) {
        log.info("查询订单,params#{}", req);
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(orderService.get(req));
        } catch (Exception e) {
            builder.code(-1).msg("查询订单失败");
            log.error("查询订单失败", e);
        }
        return builder.build();
    }

}



package com.example.supermarket.controller;

import com.example.supermarket.service.BillService;
import com.example.supermarket.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;

@Slf4j
@RestController
@RequestMapping("transaction")
public class TransactionController {
    @Resource
    private BillService billService;

    @GetMapping("get")
    public Result get(String outOrderId, Integer outOrderAmount) {
        log.info("查询交易,outOrderId#{},outOrderAmount#{}", outOrderId, outOrderAmount);
        Result.ResultBuilder builder = Result.builder();
        try {
            return billService.getTransaction(outOrderId, outOrderAmount);
        } catch (Exception e) {
            builder.code(-1).msg("查询交易失败");
            log.error("查询交易失败", e);
        }
        return builder.build();
    }

}


package com.example.supermarket.controller;

import com.example.supermarket.controller.model.UserReq;
import com.example.supermarket.entity.User;
import com.example.supermarket.service.UserService;
import com.example.supermarket.util.Consts;
import com.example.supermarket.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

@Slf4j
@RestController
public class UserController {

    @Resource
    private UserService userService;

    @GetMapping("login")
    public Result login(String username, String password) {
        try {
            return userService.checkAndLogin(username, password);
        } catch (Exception e) {
            return Result.builder().code(-1).msg("系统异常").build();
        }
    }

    @GetMapping("logout")
    public Result logout(HttpSession session) {
        if (session != null) {
            session.removeAttribute(Consts.SEESION_UNAME);
            session.removeAttribute(Consts.SEESION_UID);
        }
        return Result.builder().build();
    }

    @PostMapping("addAccount")
    public Result add(@RequestBody User user) {
        log.info("添加或修改用户,user#{}", user);
        Result.ResultBuilder builder = Result.builder();
        try {
            return userService.add(user);
        } catch (Exception e) {
            log.error("添加或修改用户失败,user#{}", user);
            builder.code(-1).msg("添加或修改用户失败");
        }
        return builder.build();
    }

    @GetMapping("updatePwd")
    public Result updatePwd(String oldPassword, String newPassword) {
        log.info("修改密码,oldPassword#{},newPassword#{}", oldPassword, newPassword);
        try {
            return userService.updatePassword(oldPassword, newPassword);
        } catch (Exception e) {
            log.error("修改密码失败", e);
            return Result.builder().code(-1).msg("修改密码失败").build();
        }
    }

    @GetMapping("updatePassword")
    public Result updatePassword(Integer id, String password) {
        log.info("修改密码,id#{},password#{}", id, password);
        Result.ResultBuilder builder = Result.builder();
        try {
            userService.updatePassword(id, password);
        } catch (Exception e) {
            log.error("修改密码失败", e);
            builder.code(-1).msg("修改密码失败").build();
        }
        return builder.build();
    }

    @PostMapping("getAccount")
    public Result getAccount(@RequestBody UserReq req) {
        log.info("查询用户,req#{}", req);
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(userService.select(req));
        } catch (Exception e) {
            log.error("查询用户失败", e);
            builder.code(-1).msg("查询用户失败").build();
        }
        return builder.build();
    }

    @RequestMapping("deleteAccount")
    public Result deleteAccount(Integer id) {
        try {
            log.info("delete account,id#{}", id);
            return userService.delete(id);
        } catch (Exception e) {
            log.error("delete account error#{}", e);
            return Result.builder().code(-1).msg("删除用户失败").build();
        }
    }

}
