package com.example.supermarket.service;

import com.alibaba.fastjson.JSON;
import com.example.supermarket.client.JyClient;
import com.example.supermarket.config.JyConfig;
import com.example.supermarket.controller.model.BillReq;
import com.example.supermarket.util.Result;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;


@Service
public class BillService {
    @Resource
    private CommonService commonService;
    @Resource
    private JyClient jyClient;
    @Resource
    private JyConfig jyConfig;


    public Result get(String date) {
        Map<String, Object> map = new HashMap<>();
        map.put("placedDate", date);
        Result result = jyClient.request(jyConfig.getDailyBill(), JSON.toJSONString(map));
        Optional.ofNullable(result.getData()).ifPresent(it -> result.setData(JSON.parseArray((String) it)));
        return result;
    }

    public Result add(BillReq req) {
        Map<String, Object> map = new HashMap<>();
        map.put("placedDate", LocalDate.now().minusDays(1).toString());
        map.put("Info", JSON.toJSONString(req));
        return jyClient.request(jyConfig.getAddBill(), JSON.toJSONString(map));
    }

    public Result getTransaction(String outOrderId, Integer outOrderAmount) {
        Map<String, Object> map = new HashMap<>();
        map.put("outOrderId", outOrderId);
        map.put("outOrderAmount", outOrderAmount);
        return jyClient.request(jyConfig.getQueryPay(), JSON.toJSONString(map));
    }
}



package com.example.supermarket.service;

import com.example.supermarket.util.Consts;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@Service
public class CommonService {

    @Value("${upload.path}")
    private String path;
    @Value("${upload.url}")
    private String url;
    @Resource
    private HttpSession httpSession;

    public Integer getUserId() {
        return (Integer) Optional.ofNullable(httpSession.getAttribute(Consts.SEESION_UID)).orElse(null);
    }

    public String getUsername() {
        return (String) Optional.ofNullable(httpSession.getAttribute(Consts.SEESION_UNAME)).orElse(null);
    }

    public String getDateTime() {
        return LocalDateTime.now().withNano(0).toString().replace("T", " ");
    }

    public String getUUID() {
        return UUID.randomUUID().toString().replaceAll("-", "");
    }

    public Object upload(MultipartFile file) throws Exception {
        String originalFilename = file.getOriginalFilename();
        String type = originalFilename.substring(originalFilename.lastIndexOf(".") + 1);
        String filename = getUUID() + "." + type;
        log.info("filename#{}", filename);
        String filePath = path + filename;
        Files.copy(file.getInputStream(), Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);
        return url + filename;
    }
}



package com.example.supermarket.service;

import com.alibaba.fastjson.JSONObject;
import com.example.supermarket.controller.model.GoodsReq;
import com.example.supermarket.dao.GoodsMapper;
import com.example.supermarket.dao.GoodsTypeMapper;
import com.example.supermarket.entity.Goods;
import com.example.supermarket.entity.GoodsType;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;


@Service
public class GoodsService {
    @Resource
    private GoodsTypeMapper goodsTypeMapper;
    @Resource
    private GoodsMapper goodsMapper;

    public void addType(String name) {
        goodsTypeMapper.insertSelective(GoodsType.builder().name(name).build());
    }

    public Object getType() {
        return goodsTypeMapper.select();
    }

    public void addGoods(Goods goods) {
        goodsMapper.insertSelective(goods);
    }

    public Object getGoods(GoodsReq req) {
        Integer total = goodsMapper.count(req);
        List<Goods> list = goodsMapper.select(req);
        JSONObject data = new JSONObject();
        data.put("total", total);
        data.put("list", list);
        return data;
    }
}



package com.example.supermarket.service;

import com.alibaba.fastjson.JSONObject;
import com.example.supermarket.controller.model.OrderReq;
import com.example.supermarket.dao.OrderRecordMapper;
import com.example.supermarket.entity.OrderRecord;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;
import java.util.Optional;


@Service
public class OrderService {
    @Resource
    private OrderRecordMapper orderRecordMapper;
    @Resource
    private CommonService commonService;
    @Resource
    private UserService userService;

    public void add(OrderRecord record) {
        OrderRecord build = OrderRecord.builder().number(commonService.getUUID()).createTs(commonService.getDateTime()).userId(commonService.getUserId())
                .status(3).goodsId(record.getGoodsId()).price(record.getPrice()).address(record.getAddress()).build();
        orderRecordMapper.insertSelective(build);
    }

    public Object get(OrderReq req) {
        Integer userId = commonService.getUserId();
        Optional.ofNullable(userService.getById(userId)).ifPresent(user -> {
            if (!user.getRole().equals("ADMIN")) req.setUserId(userId);
        });
        Integer total = orderRecordMapper.count(req);
        List<OrderRecord> list = orderRecordMapper.select(req);
        JSONObject data = new JSONObject();
        data.put("total", total);
        data.put("list", list);
        return data;
    }
}



package com.example.supermarket.service;

import com.alibaba.fastjson.JSONObject;
import com.example.supermarket.controller.model.UserReq;
import com.example.supermarket.dao.UserMapper;
import com.example.supermarket.entity.User;
import com.example.supermarket.util.Consts;
import com.example.supermarket.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
public class UserService {
    @Resource
    private UserMapper userMapper;
    @Resource
    private HttpSession httpSession;

    public Result checkAndLogin(String username, String password) {
        User select = userMapper.selectByUsernameAndPassword(username, password);
        if (select != null) {
            JSONObject data = new JSONObject();
            data.fluentPut("username", select.getUsername()).fluentPut("uid", select.getId()).fluentPut("role", select.getRole());
            httpSession.setAttribute(Consts.SEESION_UNAME, select.getUsername());
            httpSession.setAttribute(Consts.SEESION_UID, select.getId());
            httpSession.setMaxInactiveInterval(30 * 60);
            return Result.builder().data(data).build();
        }
        return Result.builder().code(-1).msg("用户名或者密码错误").build();
    }

    public Result add(User user) {
        Result.ResultBuilder builder = Result.builder();
        Integer id = user.getId();
        if (id != null) {
            userMapper.updateByPrimaryKeySelective(user);
        } else {
            String username = user.getUsername();
            if (userMapper.isExist(username) > 0) {
                builder.code(-1).msg("账号名已存在！");
            } else {
                user.setRole("NORMAL");
                userMapper.insertSelective(user);
            }
        }
        return builder.build();
    }

    public Result delete(Integer id) {
        int i = userMapper.deleteByPrimaryKey(id);
        log.info("delete user successfully,userId#{}", id);
        return Result.builder().code(-1).msg("fail").build();
    }

    public Object select(UserReq req) {
        Integer total = userMapper.count(req);
        List<User> list = userMapper.select(req);
        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
    }

    /*** 修改密码 ***/
    public Result updatePassword(String oldPassword, String newPassword) {
        Result.ResultBuilder builder = Result.builder();
        Integer id = (Integer) httpSession.getAttribute(Consts.SEESION_UID);
        if (id != null) {
            User user = userMapper.selectByPrimaryKey(id);
            if (!user.getPassword().equals(oldPassword)) {
                builder.code(-1).msg("旧密码错误");
            } else {
                user.setPassword(newPassword);
                userMapper.updateByPrimaryKeySelective(user);
            }
        }
        return builder.build();
    }

    public void updatePassword(Integer id, String password) {
        Optional.ofNullable(userMapper.selectByPrimaryKey(id)).ifPresent(it -> {
            it.setPassword(password);
            userMapper.updateByPrimaryKeySelective(it);
        });
    }

    public User getById(Integer id) {
        return userMapper.selectByPrimaryKey(id);
    }

}
