<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.supermarket.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.example.supermarket.entity.User">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="role" jdbcType="VARCHAR" property="role"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, password, phone, role, username
  </sql>
    <select id="isExist" resultType="int">
         select count(*) from user where username=#{username}
    </select>
    <select id="count" resultType="Integer">
        select count(*) from user
        <where>
            <if test="username!=null and username!=''">username=#{username}</if>
        </where>
    </select>
    <select id="select" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user
        <where>
            <if test="username!=null and username!=''">username=#{username}
            </if>
        </where>
        <if test="pageNo != null and pageSize != null">
            limit ${(pageNo-1)*pageSize},#{pageSize}
        </if>
    </select>
    <select id="selectByUsernameAndPassword" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user where username=#{username} and password=#{password}
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.example.supermarket.entity.User">
    insert into user (id, username, password,
      phone, role
      )
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{phone,jdbcType=VARCHAR}, #{role,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.example.supermarket.entity.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="role != null">
                role,
            </if>
            <if test="username != null">
                username,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                #{role,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.supermarket.entity.User">
        update user
        <set>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                role = #{role,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.supermarket.entity.User">
    update user
    set password = #{password,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      role = #{role,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>